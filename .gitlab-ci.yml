# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - symtensor-env/

before_script:
  - python --version  # For debugging
  #- pip install virtualenv
  #- virtualenv venv
  - python -m venv symtensor-env
  - source symtensor-env/bin/activate

test:
  stage: test
  image: python:3
  script:
    #- python setup.py test
    #- pip install tox flake8  # you can also use tox
    #- tox -e py36,flake8

    # The extra-index-url causes the CPU-only version of PyTorch to be installed, which is 200MB instead of 800MB.
    - pip install --extra-index-url https://download.pytorch.org/whl/cpu .[test]

    # Coverage report:           https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html#python-example
    #                            https://stackoverflow.com/questions/64907513/activate-test-coverage-for-python-code-on-gitlab
    # Unit test reports (JUnit): https://docs.gitlab.com/ee/ci/testing/unit_test_reports.html#how-to-set-it-up
    #                            https://docs.pytest.org/en/7.1.x/how-to/output.html#creating-junitxml-format-files
    # Note that running `pytest --cov=symtensor` works locally but not in the CI image
    - coverage run -m pytest --junitxml=rspec.xml
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      # Specifying paths allows the artifacts to be browsed and downloaded on the job page
      - coverage.xml
      - rspec.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: rspec.xml

#run:
#  script:
#    - python setup.py bdist_wheel
#    # an alternative approach is to install and run:
#    - pip install dist/*
#    # run the command here
#  artifacts:
#    paths:
#      - dist/*.whl

#pages:
#  script:
#    - pip install sphinx sphinx-rtd-theme
#    - cd doc
#    - make html
#    - mv build/html/ ../public/
#  artifacts:
#    paths:
#      - public
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#deploy:
#  stage: deploy
#  script: echo "Define your deployment script!"
#  environment: production
